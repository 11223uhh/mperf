#pragma once

#include <stdint.h>
#include <unordered_map>

enum cp_event_select {
    CP_ALWAYS_COUNT = 0,
    CP_BUSY_GFX_CORE_IDLE = 1,
    CP_BUSY_CYCLES = 2,
    CP_NUM_PREEMPTIONS = 3,
    CP_PREEMPTION_REACTION_DELAY = 4,
    CP_PREEMPTION_SWITCH_OUT_TIME = 5,
    CP_PREEMPTION_SWITCH_IN_TIME = 6,
    CP_DEAD_DRAWS_IN_BIN_RENDER = 7,
    CP_PREDICATED_DRAWS_KILLED = 8,
    CP_MODE_SWITCH = 9,
    CP_ZPASS_DONE = 10,
    CP_CONTEXT_DONE = 11,
    CP_CACHE_FLUSH = 12,
    CP_LONG_PREEMPTIONS = 13,
    CP_SQE_I_CACHE_STARVE = 14,
    CP_SQE_IDLE = 15,
    CP_SQE_PM4_STARVE_RB_IB = 16,
    CP_SQE_PM4_STARVE_SDS = 17,
    CP_SQE_MRB_STARVE = 18,
    CP_SQE_RRB_STARVE = 19,
    CP_SQE_VSD_STARVE = 20,
    CP_VSD_DECODE_STARVE = 21,
    CP_SQE_PIPE_OUT_STALL = 22,
    CP_SQE_SYNC_STALL = 23,
    CP_SQE_PM4_WFI_STALL = 24,
    CP_SQE_SYS_WFI_STALL = 25,
    CP_SQE_T4_EXEC = 26,
    CP_SQE_LOAD_STATE_EXEC = 27,
    CP_SQE_SAVE_SDS_STATE = 28,
    CP_SQE_DRAW_EXEC = 29,
    CP_SQE_CTXT_REG_BUNCH_EXEC = 30,
    CP_SQE_EXEC_PROFILED = 31,
    CP_MEMORY_POOL_EMPTY = 32,
    CP_MEMORY_POOL_SYNC_STALL = 33,
    CP_MEMORY_POOL_ABOVE_THRESH = 34,
    CP_AHB_WR_STALL_PRE_DRAWS = 35,
    CP_AHB_STALL_SQE_GMU = 36,
    CP_AHB_STALL_SQE_WR_OTHER = 37,
    CP_AHB_STALL_SQE_RD_OTHER = 38,
    CP_CLUSTER0_EMPTY = 39,
    CP_CLUSTER1_EMPTY = 40,
    CP_CLUSTER2_EMPTY = 41,
    CP_CLUSTER3_EMPTY = 42,
    CP_CLUSTER4_EMPTY = 43,
    CP_CLUSTER5_EMPTY = 44,
    CP_PM4_DATA = 45,
    CP_PM4_HEADERS = 46,
    CP_VBIF_READ_BEATS = 47,
    CP_VBIF_WRITE_BEATS = 48,
    CP_SQE_INSTR_COUNTER = 49,
};

enum rbbm_event_select {
    RBBM_ALWAYS_COUNT = 0,
    RBBM_ALWAYS_ON = 1,
    RBBM_TSE_BUSY = 2,
    RBBM_RAS_BUSY = 3,
    RBBM_PC_DCALL_BUSY = 4,
    RBBM_PC_VSD_BUSY = 5,
    RBBM_STATUS_MASKED = 6,
    RBBM_COM_BUSY = 7,
    RBBM_DCOM_BUSY = 8,
    RBBM_VBIF_BUSY = 9,
    RBBM_VSC_BUSY = 10,
    RBBM_TESS_BUSY = 11,
    RBBM_UCHE_BUSY = 12,
    RBBM_HLSQ_BUSY = 13,
};

enum pc_event_select {
    PC_BUSY_CYCLES = 0,
    PC_WORKING_CYCLES = 1,
    PC_STALL_CYCLES_VFD = 2,
    PC_STALL_CYCLES_TSE = 3,
    PC_STALL_CYCLES_VPC = 4,
    PC_STALL_CYCLES_UCHE = 5,
    PC_STALL_CYCLES_TESS = 6,
    PC_STALL_CYCLES_TSE_ONLY = 7,
    PC_STALL_CYCLES_VPC_ONLY = 8,
    PC_PASS1_TF_STALL_CYCLES = 9,
    PC_STARVE_CYCLES_FOR_INDEX = 10,
    PC_STARVE_CYCLES_FOR_TESS_FACTOR = 11,
    PC_STARVE_CYCLES_FOR_VIZ_STREAM = 12,
    PC_STARVE_CYCLES_FOR_POSITION = 13,
    PC_STARVE_CYCLES_DI = 14,
    PC_VIS_STREAMS_LOADED = 15,
    PC_INSTANCES = 16,
    PC_VPC_PRIMITIVES = 17,
    PC_DEAD_PRIM = 18,
    PC_LIVE_PRIM = 19,
    PC_VERTEX_HITS = 20,
    PC_IA_VERTICES = 21,
    PC_IA_PRIMITIVES = 22,
    PC_GS_PRIMITIVES = 23,
    PC_HS_INVOCATIONS = 24,
    PC_DS_INVOCATIONS = 25,
    PC_VS_INVOCATIONS = 26,
    PC_GS_INVOCATIONS = 27,
    PC_DS_PRIMITIVES = 28,
    PC_VPC_POS_DATA_TRANSACTION = 29,
    PC_3D_DRAWCALLS = 30,
    PC_2D_DRAWCALLS = 31,
    PC_NON_DRAWCALL_GLOBAL_EVENTS = 32,
    TESS_BUSY_CYCLES = 33,
    TESS_WORKING_CYCLES = 34,
    TESS_STALL_CYCLES_PC = 35,
    TESS_STARVE_CYCLES_PC = 36,
    PC_TSE_TRANSACTION = 37,
    PC_TSE_VERTEX = 38,
    PC_TESS_PC_UV_TRANS = 39,
    PC_TESS_PC_UV_PATCHES = 40,
    PC_TESS_FACTOR_TRANS = 41,
};

enum vfd_event_select {
    VFD_BUSY_CYCLES = 0,
    VFD_STALL_CYCLES_UCHE = 1,
    VFD_STALL_CYCLES_VPC_ALLOC = 2,
    VFD_STALL_CYCLES_SP_INFO = 3,
    VFD_STALL_CYCLES_SP_ATTR = 4,
    VFD_STARVE_CYCLES_UCHE = 5,
    VFD_RBUFFER_FULL = 6,
    VFD_ATTR_INFO_FIFO_FULL = 7,
    VFD_DECODED_ATTRIBUTE_BYTES = 8,
    VFD_NUM_ATTRIBUTES = 9,
    VFD_UPPER_SHADER_FIBERS = 10,
    VFD_LOWER_SHADER_FIBERS = 11,
    VFD_MODE_0_FIBERS = 12,
    VFD_MODE_1_FIBERS = 13,
    VFD_MODE_2_FIBERS = 14,
    VFD_MODE_3_FIBERS = 15,
    VFD_MODE_4_FIBERS = 16,
    VFD_TOTAL_VERTICES = 17,
    VFDP_STALL_CYCLES_VFD = 18,
    VFDP_STALL_CYCLES_VFD_INDEX = 19,
    VFDP_STALL_CYCLES_VFD_PROG = 20,
    VFDP_STARVE_CYCLES_PC = 21,
    VFDP_VS_STAGE_WAVES = 22,
};

enum hlsq_event_select {
    HLSQ_BUSY_CYCLES = 0,
    HLSQ_STALL_CYCLES_UCHE = 1,
    HLSQ_STALL_CYCLES_SP_STATE = 2,
    HLSQ_STALL_CYCLES_SP_FS_STAGE = 3,
    HLSQ_UCHE_LATENCY_CYCLES = 4,
    HLSQ_UCHE_LATENCY_COUNT = 5,
    HLSQ_FS_STAGE_1X_WAVES = 6,
    HLSQ_FS_STAGE_2X_WAVES = 7,
    HLSQ_QUADS = 8,
    HLSQ_CS_INVOCATIONS = 9,
    HLSQ_COMPUTE_DRAWCALLS = 10,
    HLSQ_FS_DATA_WAIT_PROGRAMMING = 11,
    HLSQ_DUAL_FS_PROG_ACTIVE = 12,
    HLSQ_DUAL_VS_PROG_ACTIVE = 13,
    HLSQ_FS_BATCH_COUNT_ZERO = 14,
    HLSQ_VS_BATCH_COUNT_ZERO = 15,
    HLSQ_WAVE_PENDING_NO_QUAD = 16,
    HLSQ_WAVE_PENDING_NO_PRIM_BASE = 17,
    HLSQ_STALL_CYCLES_VPC = 18,
    HLSQ_PIXELS = 19,
    HLSQ_DRAW_MODE_SWITCH_VSFS_SYNC = 20,
};

enum vpc_event_select {
    VPC_BUSY_CYCLES = 0,
    VPC_WORKING_CYCLES = 1,
    VPC_STALL_CYCLES_UCHE = 2,
    VPC_STALL_CYCLES_VFD_WACK = 3,
    VPC_STALL_CYCLES_HLSQ_PRIM_ALLOC = 4,
    VPC_STALL_CYCLES_PC = 5,
    VPC_STALL_CYCLES_SP_LM = 6,
    VPC_STARVE_CYCLES_SP = 7,
    VPC_STARVE_CYCLES_LRZ = 8,
    VPC_PC_PRIMITIVES = 9,
    VPC_SP_COMPONENTS = 10,
    VPC_STALL_CYCLES_VPCRAM_POS = 11,
    VPC_LRZ_ASSIGN_PRIMITIVES = 12,
    VPC_RB_VISIBLE_PRIMITIVES = 13,
    VPC_LM_TRANSACTION = 14,
    VPC_STREAMOUT_TRANSACTION = 15,
    VPC_VS_BUSY_CYCLES = 16,
    VPC_PS_BUSY_CYCLES = 17,
    VPC_VS_WORKING_CYCLES = 18,
    VPC_PS_WORKING_CYCLES = 19,
    VPC_STARVE_CYCLES_RB = 20,
    VPC_NUM_VPCRAM_READ_POS = 21,
    VPC_WIT_FULL_CYCLES = 22,
    VPC_VPCRAM_FULL_CYCLES = 23,
    VPC_LM_FULL_WAIT_FOR_INTP_END = 24,
    VPC_NUM_VPCRAM_WRITE = 25,
    VPC_NUM_VPCRAM_READ_SO = 26,
    VPC_NUM_ATTR_REQ_LM = 27,
};

enum tse_event_select {
    TSE_BUSY_CYCLES = 0,
    TSE_CLIPPING_CYCLES = 1,
    TSE_STALL_CYCLES_RAS = 2,
    TSE_STALL_CYCLES_LRZ_BARYPLANE = 3,
    TSE_STALL_CYCLES_LRZ_ZPLANE = 4,
    TSE_STARVE_CYCLES_PC = 5,
    TSE_INPUT_PRIM = 6,
    TSE_INPUT_NULL_PRIM = 7,
    TSE_TRIVAL_REJ_PRIM = 8,
    TSE_CLIPPED_PRIM = 9,
    TSE_ZERO_AREA_PRIM = 10,
    TSE_FACENESS_CULLED_PRIM = 11,
    TSE_ZERO_PIXEL_PRIM = 12,
    TSE_OUTPUT_NULL_PRIM = 13,
    TSE_OUTPUT_VISIBLE_PRIM = 14,
    TSE_CINVOCATION = 15,
    TSE_CPRIMITIVES = 16,
    TSE_2D_INPUT_PRIM = 17,
    TSE_2D_ALIVE_CYCLES = 18,
    TSE_CLIP_PLANES = 19,
};

enum ras_event_select {
    RAS_BUSY_CYCLES = 0,
    RAS_SUPERTILE_ACTIVE_CYCLES = 1,
    RAS_STALL_CYCLES_LRZ = 2,
    RAS_STARVE_CYCLES_TSE = 3,
    RAS_SUPER_TILES = 4,
    RAS_8X4_TILES = 5,
    RAS_MASKGEN_ACTIVE = 6,
    RAS_FULLY_COVERED_SUPER_TILES = 7,
    RAS_FULLY_COVERED_8X4_TILES = 8,
    RAS_PRIM_KILLED_INVISILBE = 9,
    RAS_SUPERTILE_GEN_ACTIVE_CYCLES = 10,
    RAS_LRZ_INTF_WORKING_CYCLES = 11,
    RAS_BLOCKS = 12,
};

// uche means L2 cahe (unified cache)
enum uche_event_select {
    UCHE_BUSY_CYCLES = 0,
    UCHE_STALL_CYCLES_ARBITER = 1,
    UCHE_VBIF_LATENCY_CYCLES = 2,
    UCHE_VBIF_LATENCY_SAMPLES = 3,
    UCHE_VBIF_READ_BEATS_TP = 4,
    UCHE_VBIF_READ_BEATS_VFD = 5,
    UCHE_VBIF_READ_BEATS_HLSQ = 6,
    UCHE_VBIF_READ_BEATS_LRZ = 7,
    UCHE_VBIF_READ_BEATS_SP = 8,
    UCHE_READ_REQUESTS_TP = 9,
    UCHE_READ_REQUESTS_VFD = 10,
    UCHE_READ_REQUESTS_HLSQ = 11,
    UCHE_READ_REQUESTS_LRZ = 12,
    UCHE_READ_REQUESTS_SP = 13,
    UCHE_WRITE_REQUESTS_LRZ = 14,
    UCHE_WRITE_REQUESTS_SP = 15,
    UCHE_WRITE_REQUESTS_VPC = 16,
    UCHE_WRITE_REQUESTS_VSC = 17,
    UCHE_EVICTS = 18,
    UCHE_BANK_REQ0 = 19,
    UCHE_BANK_REQ1 = 20,
    UCHE_BANK_REQ2 = 21,
    UCHE_BANK_REQ3 = 22,
    UCHE_BANK_REQ4 = 23,
    UCHE_BANK_REQ5 = 24,
    UCHE_BANK_REQ6 = 25,
    UCHE_BANK_REQ7 = 26,
    UCHE_VBIF_READ_BEATS_CH0 = 27,
    UCHE_VBIF_READ_BEATS_CH1 = 28,
    UCHE_GMEM_READ_BEATS = 29,
    UCHE_TPH_REF_FULL = 30,
    UCHE_TPH_VICTIM_FULL = 31,
    UCHE_TPH_EXT_FULL = 32,
    UCHE_VBIF_STALL_WRITE_DATA = 33,
    UCHE_DCMP_LATENCY_SAMPLES = 34,
    UCHE_DCMP_LATENCY_CYCLES = 35,
    UCHE_VBIF_READ_BEATS_PC = 36,
    UCHE_READ_REQUESTS_PC = 37,
    UCHE_RAM_READ_REQ = 38,
    UCHE_RAM_WRITE_REQ = 39,
};

// tp means texture processor
enum tp_event_select {
    TP_BUSY_CYCLES = 0,
    TP_STALL_CYCLES_UCHE = 1,
    TP_LATENCY_CYCLES = 2,
    TP_LATENCY_TRANS = 3,
    TP_FLAG_CACHE_REQUEST_SAMPLES = 4,
    TP_FLAG_CACHE_REQUEST_LATENCY = 5,
    TP_L1_CACHELINE_REQUESTS = 6,
    TP_L1_CACHELINE_MISSES = 7,
    TP_SP_TP_TRANS = 8,
    TP_TP_SP_TRANS = 9,
    TP_OUTPUT_PIXELS = 10,
    TP_FILTER_WORKLOAD_16BIT = 11,
    TP_FILTER_WORKLOAD_32BIT = 12,
    TP_QUADS_RECEIVED = 13,
    TP_QUADS_OFFSET = 14,
    TP_QUADS_SHADOW = 15,
    TP_QUADS_ARRAY = 16,
    TP_QUADS_GRADIENT = 17,
    TP_QUADS_1D = 18,
    TP_QUADS_2D = 19,
    TP_QUADS_BUFFER = 20,
    TP_QUADS_3D = 21,
    TP_QUADS_CUBE = 22,
    TP_DIVERGENT_QUADS_RECEIVED = 23,
    TP_PRT_NON_RESIDENT_EVENTS = 24,
    TP_OUTPUT_PIXELS_POINT = 25,
    TP_OUTPUT_PIXELS_BILINEAR = 26,
    TP_OUTPUT_PIXELS_MIP = 27,
    TP_OUTPUT_PIXELS_ANISO = 28,
    TP_OUTPUT_PIXELS_ZERO_LOD = 29,
    TP_FLAG_CACHE_REQUESTS = 30,
    TP_FLAG_CACHE_MISSES = 31,
    TP_L1_5_L2_REQUESTS = 32,
    TP_2D_OUTPUT_PIXELS = 33,
    TP_2D_OUTPUT_PIXELS_POINT = 34,
    TP_2D_OUTPUT_PIXELS_BILINEAR = 35,
    TP_2D_FILTER_WORKLOAD_16BIT = 36,
    TP_2D_FILTER_WORKLOAD_32BIT = 37,
    TP_TPA2TPC_TRANS = 38,
    TP_L1_MISSES_ASTC_1TILE = 39,
    TP_L1_MISSES_ASTC_2TILE = 40,
    TP_L1_MISSES_ASTC_4TILE = 41,
    TP_L1_5_L2_COMPRESS_REQS = 42,
    TP_L1_5_L2_COMPRESS_MISS = 43,
    TP_L1_BANK_CONFLICT = 44,
    TP_L1_5_MISS_LATENCY_CYCLES = 45,
    TP_L1_5_MISS_LATENCY_TRANS = 46,
    TP_QUADS_CONSTANT_MULTIPLIED = 47,
    TP_FRONTEND_WORKING_CYCLES = 48,
    TP_L1_TAG_WORKING_CYCLES = 49,
    TP_L1_DATA_WRITE_WORKING_CYCLES = 50,
    TP_PRE_L1_DECOM_WORKING_CYCLES = 51,
    TP_BACKEND_WORKING_CYCLES = 52,
    TP_FLAG_CACHE_WORKING_CYCLES = 53,
    TP_L1_5_CACHE_WORKING_CYCLES = 54,
    TP_STARVE_CYCLES_SP = 55,
    TP_STARVE_CYCLES_UCHE = 56,
};

// sp means streaming processor
enum sp_event_select {
    SP_BUSY_CYCLES = 0,
    SP_ALU_WORKING_CYCLES = 1,
    SP_EFU_WORKING_CYCLES = 2,
    SP_STALL_CYCLES_VPC = 3,
    SP_STALL_CYCLES_TP = 4,
    SP_STALL_CYCLES_UCHE = 5,
    SP_STALL_CYCLES_RB = 6,
    SP_NON_EXECUTION_CYCLES = 7,
    SP_WAVE_CONTEXTS = 8,
    SP_WAVE_CONTEXT_CYCLES = 9,
    SP_FS_STAGE_WAVE_CYCLES = 10,
    SP_FS_STAGE_WAVE_SAMPLES = 11,
    SP_VS_STAGE_WAVE_CYCLES = 12,
    SP_VS_STAGE_WAVE_SAMPLES = 13,
    SP_FS_STAGE_DURATION_CYCLES = 14,
    SP_VS_STAGE_DURATION_CYCLES = 15,
    SP_WAVE_CTRL_CYCLES = 16,
    SP_WAVE_LOAD_CYCLES = 17,
    SP_WAVE_EMIT_CYCLES = 18,
    SP_WAVE_NOP_CYCLES = 19,
    SP_WAVE_WAIT_CYCLES = 20,
    SP_WAVE_FETCH_CYCLES = 21,
    SP_WAVE_IDLE_CYCLES = 22,
    SP_WAVE_END_CYCLES = 23,
    SP_WAVE_LONG_SYNC_CYCLES = 24,
    SP_WAVE_SHORT_SYNC_CYCLES = 25,
    SP_WAVE_JOIN_CYCLES = 26,
    SP_LM_LOAD_INSTRUCTIONS = 27,
    SP_LM_STORE_INSTRUCTIONS = 28,
    SP_LM_ATOMICS = 29,
    SP_GM_LOAD_INSTRUCTIONS = 30,
    SP_GM_STORE_INSTRUCTIONS = 31,
    SP_GM_ATOMICS = 32,
    SP_VS_STAGE_TEX_INSTRUCTIONS = 33,
    SP_VS_STAGE_EFU_INSTRUCTIONS = 34,
    SP_VS_STAGE_FULL_ALU_INSTRUCTIONS = 35,
    SP_VS_STAGE_HALF_ALU_INSTRUCTIONS = 36,
    SP_FS_STAGE_TEX_INSTRUCTIONS = 37,
    SP_FS_STAGE_CFLOW_INSTRUCTIONS = 38,
    SP_FS_STAGE_EFU_INSTRUCTIONS = 39,
    SP_FS_STAGE_FULL_ALU_INSTRUCTIONS = 40,
    SP_FS_STAGE_HALF_ALU_INSTRUCTIONS = 41,
    SP_FS_STAGE_BARY_INSTRUCTIONS = 42,
    SP_VS_INSTRUCTIONS = 43,
    SP_FS_INSTRUCTIONS = 44,
    SP_ADDR_LOCK_COUNT = 45,
    SP_UCHE_READ_TRANS = 46,
    SP_UCHE_WRITE_TRANS = 47,
    SP_EXPORT_VPC_TRANS = 48,
    SP_EXPORT_RB_TRANS = 49,
    SP_PIXELS_KILLED = 50,
    SP_ICL1_REQUESTS = 51,
    SP_ICL1_MISSES = 52,
    SP_HS_INSTRUCTIONS = 53,
    SP_DS_INSTRUCTIONS = 54,
    SP_GS_INSTRUCTIONS = 55,
    SP_CS_INSTRUCTIONS = 56,
    SP_GPR_READ = 57,
    SP_GPR_WRITE = 58,
    SP_FS_STAGE_HALF_EFU_INSTRUCTIONS = 59,
    SP_VS_STAGE_HALF_EFU_INSTRUCTIONS = 60,
    SP_LM_BANK_CONFLICTS = 61,
    SP_TEX_CONTROL_WORKING_CYCLES = 62,
    SP_LOAD_CONTROL_WORKING_CYCLES = 63,
    SP_FLOW_CONTROL_WORKING_CYCLES = 64,
    SP_LM_WORKING_CYCLES = 65,
    SP_DISPATCHER_WORKING_CYCLES = 66,
    SP_SEQUENCER_WORKING_CYCLES = 67,
    SP_LOW_EFFICIENCY_STARVED_BY_TP = 68,
    SP_STARVE_CYCLES_HLSQ = 69,
    SP_NON_EXECUTION_LS_CYCLES = 70,
    SP_WORKING_EU = 71,
    SP_ANY_EU_WORKING = 72,
    SP_WORKING_EU_FS_STAGE = 73,
    SP_ANY_EU_WORKING_FS_STAGE = 74,
    SP_WORKING_EU_VS_STAGE = 75,
    SP_ANY_EU_WORKING_VS_STAGE = 76,
    SP_WORKING_EU_CS_STAGE = 77,
    SP_ANY_EU_WORKING_CS_STAGE = 78,
    SP_GPR_READ_PREFETCH = 79,
    SP_GPR_READ_CONFLICT = 80,
    SP_GPR_WRITE_CONFLICT = 81,
    SP_GM_LOAD_LATENCY_CYCLES = 82,
    SP_GM_LOAD_LATENCY_SAMPLES = 83,
    SP_EXECUTABLE_WAVES = 84,
};

enum rb_event_select {
    RB_BUSY_CYCLES = 0,
    RB_STALL_CYCLES_HLSQ = 1,
    RB_STALL_CYCLES_FIFO0_FULL = 2,
    RB_STALL_CYCLES_FIFO1_FULL = 3,
    RB_STALL_CYCLES_FIFO2_FULL = 4,
    RB_STARVE_CYCLES_SP = 5,
    RB_STARVE_CYCLES_LRZ_TILE = 6,
    RB_STARVE_CYCLES_CCU = 7,
    RB_STARVE_CYCLES_Z_PLANE = 8,
    RB_STARVE_CYCLES_BARY_PLANE = 9,
    RB_Z_WORKLOAD = 10,
    RB_HLSQ_ACTIVE = 11,
    RB_Z_READ = 12,
    RB_Z_WRITE = 13,
    RB_C_READ = 14,
    RB_C_WRITE = 15,
    RB_TOTAL_PASS = 16,
    RB_Z_PASS = 17,
    RB_Z_FAIL = 18,
    RB_S_FAIL = 19,
    RB_BLENDED_FXP_COMPONENTS = 20,
    RB_BLENDED_FP16_COMPONENTS = 21,
    RB_PS_INVOCATIONS = 22,
    RB_2D_ALIVE_CYCLES = 23,
    RB_2D_STALL_CYCLES_A2D = 24,
    RB_2D_STARVE_CYCLES_SRC = 25,
    RB_2D_STARVE_CYCLES_SP = 26,
    RB_2D_STARVE_CYCLES_DST = 27,
    RB_2D_VALID_PIXELS = 28,
    RB_3D_PIXELS = 29,
    RB_BLENDER_WORKING_CYCLES = 30,
    RB_ZPROC_WORKING_CYCLES = 31,
    RB_CPROC_WORKING_CYCLES = 32,
    RB_SAMPLER_WORKING_CYCLES = 33,
    RB_STALL_CYCLES_CCU_COLOR_READ = 34,
    RB_STALL_CYCLES_CCU_COLOR_WRITE = 35,
    RB_STALL_CYCLES_CCU_DEPTH_READ = 36,
    RB_STALL_CYCLES_CCU_DEPTH_WRITE = 37,
    RB_STALL_CYCLES_VPC = 38,
    RB_2D_INPUT_TRANS = 39,
    RB_2D_OUTPUT_RB_DST_TRANS = 40,
    RB_2D_OUTPUT_RB_SRC_TRANS = 41,
    RB_BLENDED_FP32_COMPONENTS = 42,
    RB_COLOR_PIX_TILES = 43,
    RB_STALL_CYCLES_CCU = 44,
    RB_EARLY_Z_ARB3_GRANT = 45,
    RB_LATE_Z_ARB3_GRANT = 46,
    RB_EARLY_Z_SKIP_GRANT = 47,
};

enum vsc_event_select {
    VSC_BUSY_CYCLES = 0,
    VSC_WORKING_CYCLES = 1,
    VSC_STALL_CYCLES_UCHE = 2,
    VSC_EOT_NUM = 3,
    VSC_INPUT_TILES = 4,
};

enum ccu_event_select {
    CCU_BUSY_CYCLES = 0,
    CCU_STALL_CYCLES_RB_DEPTH_RETURN = 1,
    CCU_STALL_CYCLES_RB_COLOR_RETURN = 2,
    CCU_STARVE_CYCLES_FLAG_RETURN = 3,
    CCU_DEPTH_BLOCKS = 4,
    CCU_COLOR_BLOCKS = 5,
    CCU_DEPTH_BLOCK_HIT = 6,
    CCU_COLOR_BLOCK_HIT = 7,
    CCU_PARTIAL_BLOCK_READ = 8,
    CCU_GMEM_READ = 9,
    CCU_GMEM_WRITE = 10,
    CCU_DEPTH_READ_FLAG0_COUNT = 11,
    CCU_DEPTH_READ_FLAG1_COUNT = 12,
    CCU_DEPTH_READ_FLAG2_COUNT = 13,
    CCU_DEPTH_READ_FLAG3_COUNT = 14,
    CCU_DEPTH_READ_FLAG4_COUNT = 15,
    CCU_DEPTH_READ_FLAG5_COUNT = 16,
    CCU_DEPTH_READ_FLAG6_COUNT = 17,
    CCU_DEPTH_READ_FLAG8_COUNT = 18,
    CCU_COLOR_READ_FLAG0_COUNT = 19,
    CCU_COLOR_READ_FLAG1_COUNT = 20,
    CCU_COLOR_READ_FLAG2_COUNT = 21,
    CCU_COLOR_READ_FLAG3_COUNT = 22,
    CCU_COLOR_READ_FLAG4_COUNT = 23,
    CCU_COLOR_READ_FLAG5_COUNT = 24,
    CCU_COLOR_READ_FLAG6_COUNT = 25,
    CCU_COLOR_READ_FLAG8_COUNT = 26,
    CCU_2D_RD_REQ = 27,
    CCU_2D_WR_REQ = 28,
};

enum lrz_event_select {
    LRZ_BUSY_CYCLES = 0,
    LRZ_STARVE_CYCLES_RAS = 1,
    LRZ_STALL_CYCLES_RB = 2,
    LRZ_STALL_CYCLES_VSC = 3,
    LRZ_STALL_CYCLES_VPC = 4,
    LRZ_STALL_CYCLES_FLAG_PREFETCH = 5,
    LRZ_STALL_CYCLES_UCHE = 6,
    LRZ_LRZ_READ = 7,
    LRZ_LRZ_WRITE = 8,
    LRZ_READ_LATENCY = 9,
    LRZ_MERGE_CACHE_UPDATING = 10,
    LRZ_PRIM_KILLED_BY_MASKGEN = 11,
    LRZ_PRIM_KILLED_BY_LRZ = 12,
    LRZ_VISIBLE_PRIM_AFTER_LRZ = 13,
    LRZ_FULL_8X8_TILES = 14,
    LRZ_PARTIAL_8X8_TILES = 15,
    LRZ_TILE_KILLED = 16,
    LRZ_TOTAL_PIXEL = 17,
    LRZ_VISIBLE_PIXEL_AFTER_LRZ = 18,
    LRZ_FULLY_COVERED_TILES = 19,
    LRZ_PARTIAL_COVERED_TILES = 20,
    LRZ_FEEDBACK_ACCEPT = 21,
    LRZ_FEEDBACK_DISCARD = 22,
    LRZ_FEEDBACK_STALL = 23,
    LRZ_STALL_CYCLES_RB_ZPLANE = 24,
    LRZ_STALL_CYCLES_RB_BPLANE = 25,
    LRZ_STALL_CYCLES_VC = 26,
    LRZ_RAS_MASK_TRANS = 27,
};

enum cmp_event_select {
    CMPDECMP_STALL_CYCLES_ARB = 0,
    CMPDECMP_VBIF_LATENCY_CYCLES = 1,
    CMPDECMP_VBIF_LATENCY_SAMPLES = 2,
    CMPDECMP_VBIF_READ_DATA_CCU = 3,
    CMPDECMP_VBIF_WRITE_DATA_CCU = 4,
    CMPDECMP_VBIF_READ_REQUEST = 5,
    CMPDECMP_VBIF_WRITE_REQUEST = 6,
    CMPDECMP_VBIF_READ_DATA = 7,
    CMPDECMP_VBIF_WRITE_DATA = 8,
    CMPDECMP_FLAG_FETCH_CYCLES = 9,
    CMPDECMP_FLAG_FETCH_SAMPLES = 10,
    CMPDECMP_DEPTH_WRITE_FLAG1_COUNT = 11,
    CMPDECMP_DEPTH_WRITE_FLAG2_COUNT = 12,
    CMPDECMP_DEPTH_WRITE_FLAG3_COUNT = 13,
    CMPDECMP_DEPTH_WRITE_FLAG4_COUNT = 14,
    CMPDECMP_DEPTH_WRITE_FLAG5_COUNT = 15,
    CMPDECMP_DEPTH_WRITE_FLAG6_COUNT = 16,
    CMPDECMP_DEPTH_WRITE_FLAG8_COUNT = 17,
    CMPDECMP_COLOR_WRITE_FLAG1_COUNT = 18,
    CMPDECMP_COLOR_WRITE_FLAG2_COUNT = 19,
    CMPDECMP_COLOR_WRITE_FLAG3_COUNT = 20,
    CMPDECMP_COLOR_WRITE_FLAG4_COUNT = 21,
    CMPDECMP_COLOR_WRITE_FLAG5_COUNT = 22,
    CMPDECMP_COLOR_WRITE_FLAG6_COUNT = 23,
    CMPDECMP_COLOR_WRITE_FLAG8_COUNT = 24,
    CMPDECMP_2D_STALL_CYCLES_VBIF_REQ = 25,
    CMPDECMP_2D_STALL_CYCLES_VBIF_WR = 26,
    CMPDECMP_2D_STALL_CYCLES_VBIF_RETURN = 27,
    CMPDECMP_2D_RD_DATA = 28,
    CMPDECMP_2D_WR_DATA = 29,
    CMPDECMP_VBIF_READ_DATA_UCHE_CH0 = 30,
    CMPDECMP_VBIF_READ_DATA_UCHE_CH1 = 31,
    CMPDECMP_2D_OUTPUT_TRANS = 32,
    CMPDECMP_VBIF_WRITE_DATA_UCHE = 33,
    CMPDECMP_DEPTH_WRITE_FLAG0_COUNT = 34,
    CMPDECMP_COLOR_WRITE_FLAG0_COUNT = 35,
    CMPDECMP_COLOR_WRITE_FLAGALPHA_COUNT = 36,
    CMPDECMP_2D_BUSY_CYCLES = 37,
    CMPDECMP_2D_REORDER_STARVE_CYCLES = 38,
    CMPDECMP_2D_PIXELS = 39,
};

const std::unordered_map<std::string, int> cp_events_id_name_map{
        {"CP_ALWAYS_COUNT", CP_ALWAYS_COUNT},
        {"CP_BUSY_GFX_CORE_IDLE", CP_BUSY_GFX_CORE_IDLE},
        {"CP_BUSY_CYCLES", CP_BUSY_CYCLES},
        {"CP_NUM_PREEMPTIONS", CP_NUM_PREEMPTIONS},
        {"CP_PREEMPTION_REACTION_DELAY", CP_PREEMPTION_REACTION_DELAY},
        {"CP_PREEMPTION_SWITCH_OUT_TIME", CP_PREEMPTION_SWITCH_OUT_TIME},
        {"CP_PREEMPTION_SWITCH_IN_TIME", CP_PREEMPTION_SWITCH_IN_TIME},
        {"CP_DEAD_DRAWS_IN_BIN_RENDER", CP_DEAD_DRAWS_IN_BIN_RENDER},
        {"CP_PREDICATED_DRAWS_KILLED", CP_PREDICATED_DRAWS_KILLED},
        {"CP_MODE_SWITCH", CP_MODE_SWITCH},
        {"CP_ZPASS_DONE", CP_ZPASS_DONE},
        {"CP_CONTEXT_DONE", CP_CONTEXT_DONE},
        {"CP_CACHE_FLUSH", CP_CACHE_FLUSH},
        {"CP_LONG_PREEMPTIONS", CP_LONG_PREEMPTIONS},
        {"CP_SQE_I_CACHE_STARVE", CP_SQE_I_CACHE_STARVE},
        {"CP_SQE_IDLE", CP_SQE_IDLE},
        {"CP_SQE_PM4_STARVE_RB_IB", CP_SQE_PM4_STARVE_RB_IB},
        {"CP_SQE_PM4_STARVE_SDS", CP_SQE_PM4_STARVE_SDS},
        {"CP_SQE_MRB_STARVE", CP_SQE_MRB_STARVE},
        {"CP_SQE_RRB_STARVE", CP_SQE_RRB_STARVE},
        {"CP_SQE_VSD_STARVE", CP_SQE_VSD_STARVE},
        {"CP_VSD_DECODE_STARVE", CP_VSD_DECODE_STARVE},
        {"CP_SQE_PIPE_OUT_STALL", CP_SQE_PIPE_OUT_STALL},
        {"CP_SQE_SYNC_STALL", CP_SQE_SYNC_STALL},
        {"CP_SQE_PM4_WFI_STALL", CP_SQE_PM4_WFI_STALL},
        {"CP_SQE_SYS_WFI_STALL", CP_SQE_SYS_WFI_STALL},
        {"CP_SQE_T4_EXEC", CP_SQE_T4_EXEC},
        {"CP_SQE_LOAD_STATE_EXEC", CP_SQE_LOAD_STATE_EXEC},
        {"CP_SQE_SAVE_SDS_STATE", CP_SQE_SAVE_SDS_STATE},
        {"CP_SQE_DRAW_EXEC", CP_SQE_DRAW_EXEC},
        {"CP_SQE_CTXT_REG_BUNCH_EXEC", CP_SQE_CTXT_REG_BUNCH_EXEC},
        {"CP_SQE_EXEC_PROFILED", CP_SQE_EXEC_PROFILED},
        {"CP_MEMORY_POOL_EMPTY", CP_MEMORY_POOL_EMPTY},
        {"CP_MEMORY_POOL_SYNC_STALL", CP_MEMORY_POOL_SYNC_STALL},
        {"CP_MEMORY_POOL_ABOVE_THRESH", CP_MEMORY_POOL_ABOVE_THRESH},
        {"CP_AHB_WR_STALL_PRE_DRAWS", CP_AHB_WR_STALL_PRE_DRAWS},
        {"CP_AHB_STALL_SQE_GMU", CP_AHB_STALL_SQE_GMU},
        {"CP_AHB_STALL_SQE_WR_OTHER", CP_AHB_STALL_SQE_WR_OTHER},
        {"CP_AHB_STALL_SQE_RD_OTHER", CP_AHB_STALL_SQE_RD_OTHER},
        {"CP_CLUSTER0_EMPTY", CP_CLUSTER0_EMPTY},
        {"CP_CLUSTER1_EMPTY", CP_CLUSTER1_EMPTY},
        {"CP_CLUSTER2_EMPTY", CP_CLUSTER2_EMPTY},
        {"CP_CLUSTER3_EMPTY", CP_CLUSTER3_EMPTY},
        {"CP_CLUSTER4_EMPTY", CP_CLUSTER4_EMPTY},
        {"CP_CLUSTER5_EMPTY", CP_CLUSTER5_EMPTY},
        {"CP_PM4_DATA", CP_PM4_DATA},
        {"CP_PM4_HEADERS", CP_PM4_HEADERS},
        {"CP_VBIF_READ_BEATS", CP_VBIF_READ_BEATS},
        {"CP_VBIF_WRITE_BEATS", CP_VBIF_WRITE_BEATS},
        {"CP_SQE_INSTR_COUNTER", CP_SQE_INSTR_COUNTER},
};
const std::unordered_map<std::string, int> rbbm_events_id_name_map{
        {"RBBM_ALWAYS_COUNT", RBBM_ALWAYS_COUNT},
        {"RBBM_ALWAYS_ON", RBBM_ALWAYS_ON},
        {"RBBM_TSE_BUSY", RBBM_TSE_BUSY},
        {"RBBM_RAS_BUSY", RBBM_RAS_BUSY},
        {"RBBM_PC_DCALL_BUSY", RBBM_PC_DCALL_BUSY},
        {"RBBM_PC_VSD_BUSY", RBBM_PC_VSD_BUSY},
        {"RBBM_STATUS_MASKED", RBBM_STATUS_MASKED},
        {"RBBM_COM_BUSY", RBBM_COM_BUSY},
        {"RBBM_DCOM_BUSY", RBBM_DCOM_BUSY},
        {"RBBM_VBIF_BUSY", RBBM_VBIF_BUSY},
        {"RBBM_VSC_BUSY", RBBM_VSC_BUSY},
        {"RBBM_TESS_BUSY", RBBM_TESS_BUSY},
        {"RBBM_UCHE_BUSY", RBBM_UCHE_BUSY},
        {"RBBM_HLSQ_BUSY", RBBM_HLSQ_BUSY},
};
const std::unordered_map<std::string, int> pc_events_id_name_map{
        {"PC_BUSY_CYCLES", PC_BUSY_CYCLES},
        {"PC_WORKING_CYCLES", PC_WORKING_CYCLES},
        {"PC_STALL_CYCLES_VFD", PC_STALL_CYCLES_VFD},
        {"PC_STALL_CYCLES_TSE", PC_STALL_CYCLES_TSE},
        {"PC_STALL_CYCLES_VPC", PC_STALL_CYCLES_VPC},
        {"PC_STALL_CYCLES_UCHE", PC_STALL_CYCLES_UCHE},
        {"PC_STALL_CYCLES_TESS", PC_STALL_CYCLES_TESS},
        {"PC_STALL_CYCLES_TSE_ONLY", PC_STALL_CYCLES_TSE_ONLY},
        {"PC_STALL_CYCLES_VPC_ONLY", PC_STALL_CYCLES_VPC_ONLY},
        {"PC_PASS1_TF_STALL_CYCLES", PC_PASS1_TF_STALL_CYCLES},
        {"PC_STARVE_CYCLES_FOR_INDEX", PC_STARVE_CYCLES_FOR_INDEX},
        {"PC_STARVE_CYCLES_FOR_TESS_FACTOR", PC_STARVE_CYCLES_FOR_TESS_FACTOR},
        {"PC_STARVE_CYCLES_FOR_VIZ_STREAM", PC_STARVE_CYCLES_FOR_VIZ_STREAM},
        {"PC_STARVE_CYCLES_FOR_POSITION", PC_STARVE_CYCLES_FOR_POSITION},
        {"PC_STARVE_CYCLES_DI", PC_STARVE_CYCLES_DI},
        {"PC_VIS_STREAMS_LOADED", PC_VIS_STREAMS_LOADED},
        {"PC_INSTANCES", PC_INSTANCES},
        {"PC_VPC_PRIMITIVES", PC_VPC_PRIMITIVES},
        {"PC_DEAD_PRIM", PC_DEAD_PRIM},
        {"PC_LIVE_PRIM", PC_LIVE_PRIM},
        {"PC_VERTEX_HITS", PC_VERTEX_HITS},
        {"PC_IA_VERTICES", PC_IA_VERTICES},
        {"PC_IA_PRIMITIVES", PC_IA_PRIMITIVES},
        {"PC_GS_PRIMITIVES", PC_GS_PRIMITIVES},
        {"PC_HS_INVOCATIONS", PC_HS_INVOCATIONS},
        {"PC_DS_INVOCATIONS", PC_DS_INVOCATIONS},
        {"PC_VS_INVOCATIONS", PC_VS_INVOCATIONS},
        {"PC_GS_INVOCATIONS", PC_GS_INVOCATIONS},
        {"PC_DS_PRIMITIVES", PC_DS_PRIMITIVES},
        {"PC_VPC_POS_DATA_TRANSACTION", PC_VPC_POS_DATA_TRANSACTION},
        {"PC_3D_DRAWCALLS", PC_3D_DRAWCALLS},
        {"PC_2D_DRAWCALLS", PC_2D_DRAWCALLS},
        {"PC_NON_DRAWCALL_GLOBAL_EVENTS", PC_NON_DRAWCALL_GLOBAL_EVENTS},
        {"TESS_BUSY_CYCLES", TESS_BUSY_CYCLES},
        {"TESS_WORKING_CYCLES", TESS_WORKING_CYCLES},
        {"TESS_STALL_CYCLES_PC", TESS_STALL_CYCLES_PC},
        {"TESS_STARVE_CYCLES_PC", TESS_STARVE_CYCLES_PC},
        {"PC_TSE_TRANSACTION", PC_TSE_TRANSACTION},
        {"PC_TSE_VERTEX", PC_TSE_VERTEX},
        {"PC_TESS_PC_UV_TRANS", PC_TESS_PC_UV_TRANS},
        {"PC_TESS_PC_UV_PATCHES", PC_TESS_PC_UV_PATCHES},
        {"PC_TESS_FACTOR_TRANS", PC_TESS_FACTOR_TRANS},
};
const std::unordered_map<std::string, int> vfd_events_id_name_map{
        {"VFD_BUSY_CYCLES", VFD_BUSY_CYCLES},
        {"VFD_STALL_CYCLES_UCHE", VFD_STALL_CYCLES_UCHE},
        {"VFD_STALL_CYCLES_VPC_ALLOC", VFD_STALL_CYCLES_VPC_ALLOC},
        {"VFD_STALL_CYCLES_SP_INFO", VFD_STALL_CYCLES_SP_INFO},
        {"VFD_STALL_CYCLES_SP_ATTR", VFD_STALL_CYCLES_SP_ATTR},
        {"VFD_STARVE_CYCLES_UCHE", VFD_STARVE_CYCLES_UCHE},
        {"VFD_RBUFFER_FULL", VFD_RBUFFER_FULL},
        {"VFD_ATTR_INFO_FIFO_FULL", VFD_ATTR_INFO_FIFO_FULL},
        {"VFD_DECODED_ATTRIBUTE_BYTES", VFD_DECODED_ATTRIBUTE_BYTES},
        {"VFD_NUM_ATTRIBUTES", VFD_NUM_ATTRIBUTES},
        {"VFD_UPPER_SHADER_FIBERS", VFD_UPPER_SHADER_FIBERS},
        {"VFD_LOWER_SHADER_FIBERS", VFD_LOWER_SHADER_FIBERS},
        {"VFD_MODE_0_FIBERS", VFD_MODE_0_FIBERS},
        {"VFD_MODE_1_FIBERS", VFD_MODE_1_FIBERS},
        {"VFD_MODE_2_FIBERS", VFD_MODE_2_FIBERS},
        {"VFD_MODE_3_FIBERS", VFD_MODE_3_FIBERS},
        {"VFD_MODE_4_FIBERS", VFD_MODE_4_FIBERS},
        {"VFD_TOTAL_VERTICES", VFD_TOTAL_VERTICES},
        {"VFDP_STALL_CYCLES_VFD", VFDP_STALL_CYCLES_VFD},
        {"VFDP_STALL_CYCLES_VFD_INDEX", VFDP_STALL_CYCLES_VFD_INDEX},
        {"VFDP_STALL_CYCLES_VFD_PROG", VFDP_STALL_CYCLES_VFD_PROG},
        {"VFDP_STARVE_CYCLES_PC", VFDP_STARVE_CYCLES_PC},
        {"VFDP_VS_STAGE_WAVES", VFDP_VS_STAGE_WAVES},
};
const std::unordered_map<std::string, int> hlsq_events_id_name_map{
        {"HLSQ_BUSY_CYCLES", HLSQ_BUSY_CYCLES},
        {"HLSQ_STALL_CYCLES_UCHE", HLSQ_STALL_CYCLES_UCHE},
        {"HLSQ_STALL_CYCLES_SP_STATE", HLSQ_STALL_CYCLES_SP_STATE},
        {"HLSQ_STALL_CYCLES_SP_FS_STAGE", HLSQ_STALL_CYCLES_SP_FS_STAGE},
        {"HLSQ_UCHE_LATENCY_CYCLES", HLSQ_UCHE_LATENCY_CYCLES},
        {"HLSQ_UCHE_LATENCY_COUNT", HLSQ_UCHE_LATENCY_COUNT},
        {"HLSQ_FS_STAGE_1X_WAVES", HLSQ_FS_STAGE_1X_WAVES},
        {"HLSQ_FS_STAGE_2X_WAVES", HLSQ_FS_STAGE_2X_WAVES},
        {"HLSQ_QUADS", HLSQ_QUADS},
        {"HLSQ_CS_INVOCATIONS", HLSQ_CS_INVOCATIONS},
        {"HLSQ_COMPUTE_DRAWCALLS", HLSQ_COMPUTE_DRAWCALLS},
        {"HLSQ_FS_DATA_WAIT_PROGRAMMING", HLSQ_FS_DATA_WAIT_PROGRAMMING},
        {"HLSQ_DUAL_FS_PROG_ACTIVE", HLSQ_DUAL_FS_PROG_ACTIVE},
        {"HLSQ_DUAL_VS_PROG_ACTIVE", HLSQ_DUAL_VS_PROG_ACTIVE},
        {"HLSQ_FS_BATCH_COUNT_ZERO", HLSQ_FS_BATCH_COUNT_ZERO},
        {"HLSQ_VS_BATCH_COUNT_ZERO", HLSQ_VS_BATCH_COUNT_ZERO},
        {"HLSQ_WAVE_PENDING_NO_QUAD", HLSQ_WAVE_PENDING_NO_QUAD},
        {"HLSQ_WAVE_PENDING_NO_PRIM_BASE", HLSQ_WAVE_PENDING_NO_PRIM_BASE},
        {"HLSQ_STALL_CYCLES_VPC", HLSQ_STALL_CYCLES_VPC},
        {"HLSQ_PIXELS", HLSQ_PIXELS},
        {"HLSQ_DRAW_MODE_SWITCH_VSFS_SYNC", HLSQ_DRAW_MODE_SWITCH_VSFS_SYNC},
};
const std::unordered_map<std::string, int> vpc_events_id_name_map{
        {"VPC_BUSY_CYCLES", VPC_BUSY_CYCLES},
        {"VPC_WORKING_CYCLES", VPC_WORKING_CYCLES},
        {"VPC_STALL_CYCLES_UCHE", VPC_STALL_CYCLES_UCHE},
        {"VPC_STALL_CYCLES_VFD_WACK", VPC_STALL_CYCLES_VFD_WACK},
        {"VPC_STALL_CYCLES_HLSQ_PRIM_ALLOC", VPC_STALL_CYCLES_HLSQ_PRIM_ALLOC},
        {"VPC_STALL_CYCLES_PC", VPC_STALL_CYCLES_PC},
        {"VPC_STALL_CYCLES_SP_LM", VPC_STALL_CYCLES_SP_LM},
        {"VPC_STARVE_CYCLES_SP", VPC_STARVE_CYCLES_SP},
        {"VPC_STARVE_CYCLES_LRZ", VPC_STARVE_CYCLES_LRZ},
        {"VPC_PC_PRIMITIVES", VPC_PC_PRIMITIVES},
        {"VPC_SP_COMPONENTS", VPC_SP_COMPONENTS},
        {"VPC_STALL_CYCLES_VPCRAM_POS", VPC_STALL_CYCLES_VPCRAM_POS},
        {"VPC_LRZ_ASSIGN_PRIMITIVES", VPC_LRZ_ASSIGN_PRIMITIVES},
        {"VPC_RB_VISIBLE_PRIMITIVES", VPC_RB_VISIBLE_PRIMITIVES},
        {"VPC_LM_TRANSACTION", VPC_LM_TRANSACTION},
        {"VPC_STREAMOUT_TRANSACTION", VPC_STREAMOUT_TRANSACTION},
        {"VPC_VS_BUSY_CYCLES", VPC_VS_BUSY_CYCLES},
        {"VPC_PS_BUSY_CYCLES", VPC_PS_BUSY_CYCLES},
        {"VPC_VS_WORKING_CYCLES", VPC_VS_WORKING_CYCLES},
        {"VPC_PS_WORKING_CYCLES", VPC_PS_WORKING_CYCLES},
        {"VPC_STARVE_CYCLES_RB", VPC_STARVE_CYCLES_RB},
        {"VPC_NUM_VPCRAM_READ_POS", VPC_NUM_VPCRAM_READ_POS},
        {"VPC_WIT_FULL_CYCLES", VPC_WIT_FULL_CYCLES},
        {"VPC_VPCRAM_FULL_CYCLES", VPC_VPCRAM_FULL_CYCLES},
        {"VPC_LM_FULL_WAIT_FOR_INTP_END", VPC_LM_FULL_WAIT_FOR_INTP_END},
        {"VPC_NUM_VPCRAM_WRITE", VPC_NUM_VPCRAM_WRITE},
        {"VPC_NUM_VPCRAM_READ_SO", VPC_NUM_VPCRAM_READ_SO},
        {"VPC_NUM_ATTR_REQ_LM", VPC_NUM_ATTR_REQ_LM},
};
const std::unordered_map<std::string, int> tse_events_id_name_map{
        {"TSE_BUSY_CYCLES", TSE_BUSY_CYCLES},
        {"TSE_CLIPPING_CYCLES", TSE_CLIPPING_CYCLES},
        {"TSE_STALL_CYCLES_RAS", TSE_STALL_CYCLES_RAS},
        {"TSE_STALL_CYCLES_LRZ_BARYPLANE", TSE_STALL_CYCLES_LRZ_BARYPLANE},
        {"TSE_STALL_CYCLES_LRZ_ZPLANE", TSE_STALL_CYCLES_LRZ_ZPLANE},
        {"TSE_STARVE_CYCLES_PC", TSE_STARVE_CYCLES_PC},
        {"TSE_INPUT_PRIM", TSE_INPUT_PRIM},
        {"TSE_INPUT_NULL_PRIM", TSE_INPUT_NULL_PRIM},
        {"TSE_TRIVAL_REJ_PRIM", TSE_TRIVAL_REJ_PRIM},
        {"TSE_CLIPPED_PRIM", TSE_CLIPPED_PRIM},
        {"TSE_ZERO_AREA_PRIM", TSE_ZERO_AREA_PRIM},
        {"TSE_FACENESS_CULLED_PRIM", TSE_FACENESS_CULLED_PRIM},
        {"TSE_ZERO_PIXEL_PRIM", TSE_ZERO_PIXEL_PRIM},
        {"TSE_OUTPUT_NULL_PRIM", TSE_OUTPUT_NULL_PRIM},
        {"TSE_OUTPUT_VISIBLE_PRIM", TSE_OUTPUT_VISIBLE_PRIM},
        {"TSE_CINVOCATION", TSE_CINVOCATION},
        {"TSE_CPRIMITIVES", TSE_CPRIMITIVES},
        {"TSE_2D_INPUT_PRIM", TSE_2D_INPUT_PRIM},
        {"TSE_2D_ALIVE_CYCLES", TSE_2D_ALIVE_CYCLES},
        {"TSE_CLIP_PLANES", TSE_CLIP_PLANES},
};
const std::unordered_map<std::string, int> ras_events_id_name_map{
        {"RAS_BUSY_CYCLES", RAS_BUSY_CYCLES},
        {"RAS_SUPERTILE_ACTIVE_CYCLES", RAS_SUPERTILE_ACTIVE_CYCLES},
        {"RAS_STALL_CYCLES_LRZ", RAS_STALL_CYCLES_LRZ},
        {"RAS_STARVE_CYCLES_TSE", RAS_STARVE_CYCLES_TSE},
        {"RAS_SUPER_TILES", RAS_SUPER_TILES},
        {"RAS_8X4_TILES", RAS_8X4_TILES},
        {"RAS_MASKGEN_ACTIVE", RAS_MASKGEN_ACTIVE},
        {"RAS_FULLY_COVERED_SUPER_TILES", RAS_FULLY_COVERED_SUPER_TILES},
        {"RAS_FULLY_COVERED_8X4_TILES", RAS_FULLY_COVERED_8X4_TILES},
        {"RAS_PRIM_KILLED_INVISILBE", RAS_PRIM_KILLED_INVISILBE},
        {"RAS_SUPERTILE_GEN_ACTIVE_CYCLES", RAS_SUPERTILE_GEN_ACTIVE_CYCLES},
        {"RAS_LRZ_INTF_WORKING_CYCLES", RAS_LRZ_INTF_WORKING_CYCLES},
        {"RAS_BLOCKS", RAS_BLOCKS},
};
const std::unordered_map<std::string, int> uche_events_id_name_map{
        {"UCHE_BUSY_CYCLES", UCHE_BUSY_CYCLES},
        {"UCHE_STALL_CYCLES_ARBITER", UCHE_STALL_CYCLES_ARBITER},
        {"UCHE_VBIF_LATENCY_CYCLES", UCHE_VBIF_LATENCY_CYCLES},
        {"UCHE_VBIF_LATENCY_SAMPLES", UCHE_VBIF_LATENCY_SAMPLES},
        {"UCHE_VBIF_READ_BEATS_TP", UCHE_VBIF_READ_BEATS_TP},
        {"UCHE_VBIF_READ_BEATS_VFD", UCHE_VBIF_READ_BEATS_VFD},
        {"UCHE_VBIF_READ_BEATS_HLSQ", UCHE_VBIF_READ_BEATS_HLSQ},
        {"UCHE_VBIF_READ_BEATS_LRZ", UCHE_VBIF_READ_BEATS_LRZ},
        {"UCHE_VBIF_READ_BEATS_SP",
         UCHE_VBIF_READ_BEATS_SP},  // VBIF means video bus interface, use to
                                    // transfer between UCHE and global memory
        {"UCHE_READ_REQUESTS_TP", UCHE_READ_REQUESTS_TP},
        {"UCHE_READ_REQUESTS_VFD", UCHE_READ_REQUESTS_VFD},
        {"UCHE_READ_REQUESTS_HLSQ", UCHE_READ_REQUESTS_HLSQ},
        {"UCHE_READ_REQUESTS_LRZ", UCHE_READ_REQUESTS_LRZ},
        {"UCHE_READ_REQUESTS_SP", UCHE_READ_REQUESTS_SP},
        {"UCHE_WRITE_REQUESTS_LRZ", UCHE_WRITE_REQUESTS_LRZ},
        {"UCHE_WRITE_REQUESTS_SP", UCHE_WRITE_REQUESTS_SP},
        {"UCHE_WRITE_REQUESTS_VPC", UCHE_WRITE_REQUESTS_VPC},
        {"UCHE_WRITE_REQUESTS_VSC", UCHE_WRITE_REQUESTS_VSC},
        {"UCHE_EVICTS", UCHE_EVICTS},
        {"UCHE_BANK_REQ0", UCHE_BANK_REQ0},
        {"UCHE_BANK_REQ1", UCHE_BANK_REQ1},
        {"UCHE_BANK_REQ2", UCHE_BANK_REQ2},
        {"UCHE_BANK_REQ3", UCHE_BANK_REQ3},
        {"UCHE_BANK_REQ4", UCHE_BANK_REQ4},
        {"UCHE_BANK_REQ5", UCHE_BANK_REQ5},
        {"UCHE_BANK_REQ6", UCHE_BANK_REQ6},
        {"UCHE_BANK_REQ7", UCHE_BANK_REQ7},
        {"UCHE_VBIF_READ_BEATS_CH0", UCHE_VBIF_READ_BEATS_CH0},
        {"UCHE_VBIF_READ_BEATS_CH1", UCHE_VBIF_READ_BEATS_CH1},
        {"UCHE_GMEM_READ_BEATS", UCHE_GMEM_READ_BEATS},
        {"UCHE_TPH_REF_FULL", UCHE_TPH_REF_FULL},
        {"UCHE_TPH_VICTIM_FULL", UCHE_TPH_VICTIM_FULL},
        {"UCHE_TPH_EXT_FULL", UCHE_TPH_EXT_FULL},
        {"UCHE_VBIF_STALL_WRITE_DATA", UCHE_VBIF_STALL_WRITE_DATA},
        {"UCHE_DCMP_LATENCY_SAMPLES", UCHE_DCMP_LATENCY_SAMPLES},
        {"UCHE_DCMP_LATENCY_CYCLES", UCHE_DCMP_LATENCY_CYCLES},
        {"UCHE_VBIF_READ_BEATS_PC", UCHE_VBIF_READ_BEATS_PC},
        {"UCHE_READ_REQUESTS_PC", UCHE_READ_REQUESTS_PC},
        {"UCHE_RAM_READ_REQ", UCHE_RAM_READ_REQ},
        {"UCHE_RAM_WRITE_REQ", UCHE_RAM_WRITE_REQ},
};
const std::unordered_map<std::string, int> tp_events_id_name_map{
        {"TP_BUSY_CYCLES", TP_BUSY_CYCLES},
        {"TP_STALL_CYCLES_UCHE", TP_STALL_CYCLES_UCHE},
        {"TP_LATENCY_CYCLES", TP_LATENCY_CYCLES},
        {"TP_LATENCY_TRANS", TP_LATENCY_TRANS},
        {"TP_FLAG_CACHE_REQUEST_SAMPLES", TP_FLAG_CACHE_REQUEST_SAMPLES},
        {"TP_FLAG_CACHE_REQUEST_LATENCY", TP_FLAG_CACHE_REQUEST_LATENCY},
        {"TP_L1_CACHELINE_REQUESTS", TP_L1_CACHELINE_REQUESTS},
        {"TP_L1_CACHELINE_MISSES", TP_L1_CACHELINE_MISSES},
        {"TP_SP_TP_TRANS", TP_SP_TP_TRANS},
        {"TP_TP_SP_TRANS", TP_TP_SP_TRANS},
        {"TP_OUTPUT_PIXELS", TP_OUTPUT_PIXELS},
        {"TP_FILTER_WORKLOAD_16BIT", TP_FILTER_WORKLOAD_16BIT},
        {"TP_FILTER_WORKLOAD_32BIT", TP_FILTER_WORKLOAD_32BIT},
        {"TP_QUADS_RECEIVED", TP_QUADS_RECEIVED},
        {"TP_QUADS_OFFSET", TP_QUADS_OFFSET},
        {"TP_QUADS_SHADOW", TP_QUADS_SHADOW},
        {"TP_QUADS_ARRAY", TP_QUADS_ARRAY},
        {"TP_QUADS_GRADIENT", TP_QUADS_GRADIENT},
        {"TP_QUADS_1D", TP_QUADS_1D},
        {"TP_QUADS_2D", TP_QUADS_2D},
        {"TP_QUADS_BUFFER", TP_QUADS_BUFFER},
        {"TP_QUADS_3D", TP_QUADS_3D},
        {"TP_QUADS_CUBE", TP_QUADS_CUBE},
        {"TP_DIVERGENT_QUADS_RECEIVED", TP_DIVERGENT_QUADS_RECEIVED},
        {"TP_PRT_NON_RESIDENT_EVENTS", TP_PRT_NON_RESIDENT_EVENTS},
        {"TP_OUTPUT_PIXELS_POINT", TP_OUTPUT_PIXELS_POINT},
        {"TP_OUTPUT_PIXELS_BILINEAR", TP_OUTPUT_PIXELS_BILINEAR},
        {"TP_OUTPUT_PIXELS_MIP", TP_OUTPUT_PIXELS_MIP},
        {"TP_OUTPUT_PIXELS_ANISO", TP_OUTPUT_PIXELS_ANISO},
        {"TP_OUTPUT_PIXELS_ZERO_LOD", TP_OUTPUT_PIXELS_ZERO_LOD},
        {"TP_FLAG_CACHE_REQUESTS", TP_FLAG_CACHE_REQUESTS},
        {"TP_FLAG_CACHE_MISSES", TP_FLAG_CACHE_MISSES},
        {"TP_L1_5_L2_REQUESTS", TP_L1_5_L2_REQUESTS},
        {"TP_2D_OUTPUT_PIXELS", TP_2D_OUTPUT_PIXELS},
        {"TP_2D_OUTPUT_PIXELS_POINT", TP_2D_OUTPUT_PIXELS_POINT},
        {"TP_2D_OUTPUT_PIXELS_BILINEAR", TP_2D_OUTPUT_PIXELS_BILINEAR},
        {"TP_2D_FILTER_WORKLOAD_16BIT", TP_2D_FILTER_WORKLOAD_16BIT},
        {"TP_2D_FILTER_WORKLOAD_32BIT", TP_2D_FILTER_WORKLOAD_32BIT},
        {"TP_TPA2TPC_TRANS", TP_TPA2TPC_TRANS},
        {"TP_L1_MISSES_ASTC_1TILE", TP_L1_MISSES_ASTC_1TILE},
        {"TP_L1_MISSES_ASTC_2TILE", TP_L1_MISSES_ASTC_2TILE},
        {"TP_L1_MISSES_ASTC_4TILE", TP_L1_MISSES_ASTC_4TILE},
        {"TP_L1_5_L2_COMPRESS_REQS", TP_L1_5_L2_COMPRESS_REQS},
        {"TP_L1_5_L2_COMPRESS_MISS", TP_L1_5_L2_COMPRESS_MISS},
        {"TP_L1_BANK_CONFLICT", TP_L1_BANK_CONFLICT},
        {"TP_L1_5_MISS_LATENCY_CYCLES", TP_L1_5_MISS_LATENCY_CYCLES},
        {"TP_L1_5_MISS_LATENCY_TRANS", TP_L1_5_MISS_LATENCY_TRANS},
        {"TP_QUADS_CONSTANT_MULTIPLIED", TP_QUADS_CONSTANT_MULTIPLIED},
        {"TP_FRONTEND_WORKING_CYCLES", TP_FRONTEND_WORKING_CYCLES},
        {"TP_L1_TAG_WORKING_CYCLES", TP_L1_TAG_WORKING_CYCLES},
        {"TP_L1_DATA_WRITE_WORKING_CYCLES", TP_L1_DATA_WRITE_WORKING_CYCLES},
        {"TP_PRE_L1_DECOM_WORKING_CYCLES", TP_PRE_L1_DECOM_WORKING_CYCLES},
        {"TP_BACKEND_WORKING_CYCLES", TP_BACKEND_WORKING_CYCLES},
        {"TP_FLAG_CACHE_WORKING_CYCLES", TP_FLAG_CACHE_WORKING_CYCLES},
        {"TP_L1_5_CACHE_WORKING_CYCLES", TP_L1_5_CACHE_WORKING_CYCLES},
        {"TP_STARVE_CYCLES_SP", TP_STARVE_CYCLES_SP},
        {"TP_STARVE_CYCLES_UCHE", TP_STARVE_CYCLES_UCHE},
};
const std::unordered_map<std::string, int> sp_events_id_name_map{
        {"SP_BUSY_CYCLES", SP_BUSY_CYCLES},
        {"SP_ALU_WORKING_CYCLES", SP_ALU_WORKING_CYCLES},
        {"SP_EFU_WORKING_CYCLES", SP_EFU_WORKING_CYCLES},
        {"SP_STALL_CYCLES_VPC", SP_STALL_CYCLES_VPC},
        {"SP_STALL_CYCLES_TP", SP_STALL_CYCLES_TP},
        {"SP_STALL_CYCLES_UCHE", SP_STALL_CYCLES_UCHE},
        {"SP_STALL_CYCLES_RB", SP_STALL_CYCLES_RB},
        {"SP_NON_EXECUTION_CYCLES", SP_NON_EXECUTION_CYCLES},
        {"SP_WAVE_CONTEXTS", SP_WAVE_CONTEXTS},
        {"SP_WAVE_CONTEXT_CYCLES", SP_WAVE_CONTEXT_CYCLES},
        {"SP_FS_STAGE_WAVE_CYCLES", SP_FS_STAGE_WAVE_CYCLES},
        {"SP_FS_STAGE_WAVE_SAMPLES", SP_FS_STAGE_WAVE_SAMPLES},
        {"SP_VS_STAGE_WAVE_CYCLES", SP_VS_STAGE_WAVE_CYCLES},
        {"SP_VS_STAGE_WAVE_SAMPLES", SP_VS_STAGE_WAVE_SAMPLES},
        {"SP_FS_STAGE_DURATION_CYCLES", SP_FS_STAGE_DURATION_CYCLES},
        {"SP_VS_STAGE_DURATION_CYCLES", SP_VS_STAGE_DURATION_CYCLES},
        {"SP_WAVE_CTRL_CYCLES", SP_WAVE_CTRL_CYCLES},
        {"SP_WAVE_LOAD_CYCLES", SP_WAVE_LOAD_CYCLES},
        {"SP_WAVE_EMIT_CYCLES", SP_WAVE_EMIT_CYCLES},
        {"SP_WAVE_NOP_CYCLES", SP_WAVE_NOP_CYCLES},
        {"SP_WAVE_WAIT_CYCLES", SP_WAVE_WAIT_CYCLES},
        {"SP_WAVE_FETCH_CYCLES", SP_WAVE_FETCH_CYCLES},
        {"SP_WAVE_IDLE_CYCLES", SP_WAVE_IDLE_CYCLES},
        {"SP_WAVE_END_CYCLES", SP_WAVE_END_CYCLES},
        {"SP_WAVE_LONG_SYNC_CYCLES", SP_WAVE_LONG_SYNC_CYCLES},
        {"SP_WAVE_SHORT_SYNC_CYCLES", SP_WAVE_SHORT_SYNC_CYCLES},
        {"SP_WAVE_JOIN_CYCLES", SP_WAVE_JOIN_CYCLES},
        {"SP_LM_LOAD_INSTRUCTIONS", SP_LM_LOAD_INSTRUCTIONS},
        {"SP_LM_STORE_INSTRUCTIONS", SP_LM_STORE_INSTRUCTIONS},
        {"SP_LM_ATOMICS", SP_LM_ATOMICS},
        {"SP_GM_LOAD_INSTRUCTIONS", SP_GM_LOAD_INSTRUCTIONS},
        {"SP_GM_STORE_INSTRUCTIONS", SP_GM_STORE_INSTRUCTIONS},
        {"SP_GM_ATOMICS", SP_GM_ATOMICS},
        {"SP_VS_STAGE_TEX_INSTRUCTIONS", SP_VS_STAGE_TEX_INSTRUCTIONS},
        {"SP_VS_STAGE_EFU_INSTRUCTIONS", SP_VS_STAGE_EFU_INSTRUCTIONS},
        {"SP_VS_STAGE_FULL_ALU_INSTRUCTIONS",
         SP_VS_STAGE_FULL_ALU_INSTRUCTIONS},
        {"SP_VS_STAGE_HALF_ALU_INSTRUCTIONS",
         SP_VS_STAGE_HALF_ALU_INSTRUCTIONS},
        {"SP_FS_STAGE_TEX_INSTRUCTIONS", SP_FS_STAGE_TEX_INSTRUCTIONS},
        {"SP_FS_STAGE_CFLOW_INSTRUCTIONS", SP_FS_STAGE_CFLOW_INSTRUCTIONS},
        {"SP_FS_STAGE_EFU_INSTRUCTIONS", SP_FS_STAGE_EFU_INSTRUCTIONS},
        {"SP_FS_STAGE_FULL_ALU_INSTRUCTIONS",
         SP_FS_STAGE_FULL_ALU_INSTRUCTIONS},
        {"SP_FS_STAGE_HALF_ALU_INSTRUCTIONS",
         SP_FS_STAGE_HALF_ALU_INSTRUCTIONS},
        {"SP_FS_STAGE_BARY_INSTRUCTIONS", SP_FS_STAGE_BARY_INSTRUCTIONS},
        {"SP_VS_INSTRUCTIONS", SP_VS_INSTRUCTIONS},
        {"SP_FS_INSTRUCTIONS", SP_FS_INSTRUCTIONS},
        {"SP_ADDR_LOCK_COUNT", SP_ADDR_LOCK_COUNT},
        {"SP_UCHE_READ_TRANS", SP_UCHE_READ_TRANS},
        {"SP_UCHE_WRITE_TRANS", SP_UCHE_WRITE_TRANS},
        {"SP_EXPORT_VPC_TRANS", SP_EXPORT_VPC_TRANS},
        {"SP_EXPORT_RB_TRANS", SP_EXPORT_RB_TRANS},
        {"SP_PIXELS_KILLED", SP_PIXELS_KILLED},
        {"SP_ICL1_REQUESTS", SP_ICL1_REQUESTS},
        {"SP_ICL1_MISSES", SP_ICL1_MISSES},
        {"SP_HS_INSTRUCTIONS", SP_HS_INSTRUCTIONS},  // HS means hull shader
        {"SP_DS_INSTRUCTIONS", SP_DS_INSTRUCTIONS},  // DS means domain shader
        {"SP_GS_INSTRUCTIONS", SP_GS_INSTRUCTIONS},  // GS means geometry shader
        {"SP_CS_INSTRUCTIONS", SP_CS_INSTRUCTIONS},  // CS means compute shader
        {"SP_GPR_READ", SP_GPR_READ},
        {"SP_GPR_WRITE", SP_GPR_WRITE},
        {"SP_FS_STAGE_HALF_EFU_INSTRUCTIONS",
         SP_FS_STAGE_HALF_EFU_INSTRUCTIONS},
        {"SP_VS_STAGE_HALF_EFU_INSTRUCTIONS",
         SP_VS_STAGE_HALF_EFU_INSTRUCTIONS},
        {"SP_LM_BANK_CONFLICTS", SP_LM_BANK_CONFLICTS},
        {"SP_TEX_CONTROL_WORKING_CYCLES", SP_TEX_CONTROL_WORKING_CYCLES},
        {"SP_LOAD_CONTROL_WORKING_CYCLES", SP_LOAD_CONTROL_WORKING_CYCLES},
        {"SP_FLOW_CONTROL_WORKING_CYCLES", SP_FLOW_CONTROL_WORKING_CYCLES},
        {"SP_LM_WORKING_CYCLES", SP_LM_WORKING_CYCLES},
        {"SP_DISPATCHER_WORKING_CYCLES", SP_DISPATCHER_WORKING_CYCLES},
        {"SP_SEQUENCER_WORKING_CYCLES", SP_SEQUENCER_WORKING_CYCLES},
        {"SP_LOW_EFFICIENCY_STARVED_BY_TP", SP_LOW_EFFICIENCY_STARVED_BY_TP},
        {"SP_STARVE_CYCLES_HLSQ", SP_STARVE_CYCLES_HLSQ},
        {"SP_NON_EXECUTION_LS_CYCLES", SP_NON_EXECUTION_LS_CYCLES},
        {"SP_WORKING_EU", SP_WORKING_EU},
        {"SP_ANY_EU_WORKING", SP_ANY_EU_WORKING},
        {"SP_WORKING_EU_FS_STAGE",
         SP_WORKING_EU_FS_STAGE},  // FS means fragment shader
        {"SP_ANY_EU_WORKING_FS_STAGE", SP_ANY_EU_WORKING_FS_STAGE},
        {"SP_WORKING_EU_VS_STAGE",
         SP_WORKING_EU_VS_STAGE},  // VS means vertex shader
        {"SP_ANY_EU_WORKING_VS_STAGE", SP_ANY_EU_WORKING_VS_STAGE},
        {"SP_WORKING_EU_CS_STAGE",
         SP_WORKING_EU_CS_STAGE},  // CS means compute shader
        {"SP_ANY_EU_WORKING_CS_STAGE", SP_ANY_EU_WORKING_CS_STAGE},
        {"SP_GPR_READ_PREFETCH", SP_GPR_READ_PREFETCH},
        {"SP_GPR_READ_CONFLICT", SP_GPR_READ_CONFLICT},
        {"SP_GPR_WRITE_CONFLICT", SP_GPR_WRITE_CONFLICT},
        {"SP_GM_LOAD_LATENCY_CYCLES", SP_GM_LOAD_LATENCY_CYCLES},
        {"SP_GM_LOAD_LATENCY_SAMPLES", SP_GM_LOAD_LATENCY_SAMPLES},
        {"SP_EXECUTABLE_WAVES", SP_EXECUTABLE_WAVES},
};
const std::unordered_map<std::string, int> rb_events_id_name_map{
        {"RB_BUSY_CYCLES", RB_BUSY_CYCLES},
        {"RB_STALL_CYCLES_HLSQ", RB_STALL_CYCLES_HLSQ},
        {"RB_STALL_CYCLES_FIFO0_FULL", RB_STALL_CYCLES_FIFO0_FULL},
        {"RB_STALL_CYCLES_FIFO1_FULL", RB_STALL_CYCLES_FIFO1_FULL},
        {"RB_STALL_CYCLES_FIFO2_FULL", RB_STALL_CYCLES_FIFO2_FULL},
        {"RB_STARVE_CYCLES_SP", RB_STARVE_CYCLES_SP},
        {"RB_STARVE_CYCLES_LRZ_TILE", RB_STARVE_CYCLES_LRZ_TILE},
        {"RB_STARVE_CYCLES_CCU", RB_STARVE_CYCLES_CCU},
        {"RB_STARVE_CYCLES_Z_PLANE", RB_STARVE_CYCLES_Z_PLANE},
        {"RB_STARVE_CYCLES_BARY_PLANE", RB_STARVE_CYCLES_BARY_PLANE},
        {"RB_Z_WORKLOAD", RB_Z_WORKLOAD},
        {"RB_HLSQ_ACTIVE", RB_HLSQ_ACTIVE},
        {"RB_Z_READ", RB_Z_READ},
        {"RB_Z_WRITE", RB_Z_WRITE},
        {"RB_C_READ", RB_C_READ},
        {"RB_C_WRITE", RB_C_WRITE},
        {"RB_TOTAL_PASS", RB_TOTAL_PASS},
        {"RB_Z_PASS", RB_Z_PASS},
        {"RB_Z_FAIL", RB_Z_FAIL},
        {"RB_S_FAIL", RB_S_FAIL},
        {"RB_BLENDED_FXP_COMPONENTS", RB_BLENDED_FXP_COMPONENTS},
        {"RB_BLENDED_FP16_COMPONENTS", RB_BLENDED_FP16_COMPONENTS},
        {"RB_PS_INVOCATIONS", RB_PS_INVOCATIONS},
        {"RB_2D_ALIVE_CYCLES", RB_2D_ALIVE_CYCLES},
        {"RB_2D_STALL_CYCLES_A2D", RB_2D_STALL_CYCLES_A2D},
        {"RB_2D_STARVE_CYCLES_SRC", RB_2D_STARVE_CYCLES_SRC},
        {"RB_2D_STARVE_CYCLES_SP", RB_2D_STARVE_CYCLES_SP},
        {"RB_2D_STARVE_CYCLES_DST", RB_2D_STARVE_CYCLES_DST},
        {"RB_2D_VALID_PIXELS", RB_2D_VALID_PIXELS},
        {"RB_3D_PIXELS", RB_3D_PIXELS},
        {"RB_BLENDER_WORKING_CYCLES", RB_BLENDER_WORKING_CYCLES},
        {"RB_ZPROC_WORKING_CYCLES", RB_ZPROC_WORKING_CYCLES},
        {"RB_CPROC_WORKING_CYCLES", RB_CPROC_WORKING_CYCLES},
        {"RB_SAMPLER_WORKING_CYCLES", RB_SAMPLER_WORKING_CYCLES},
        {"RB_STALL_CYCLES_CCU_COLOR_READ", RB_STALL_CYCLES_CCU_COLOR_READ},
        {"RB_STALL_CYCLES_CCU_COLOR_WRITE", RB_STALL_CYCLES_CCU_COLOR_WRITE},
        {"RB_STALL_CYCLES_CCU_DEPTH_READ", RB_STALL_CYCLES_CCU_DEPTH_READ},
        {"RB_STALL_CYCLES_CCU_DEPTH_WRITE", RB_STALL_CYCLES_CCU_DEPTH_WRITE},
        {"RB_STALL_CYCLES_VPC", RB_STALL_CYCLES_VPC},
        {"RB_2D_INPUT_TRANS", RB_2D_INPUT_TRANS},
        {"RB_2D_OUTPUT_RB_DST_TRANS", RB_2D_OUTPUT_RB_DST_TRANS},
        {"RB_2D_OUTPUT_RB_SRC_TRANS", RB_2D_OUTPUT_RB_SRC_TRANS},
        {"RB_BLENDED_FP32_COMPONENTS", RB_BLENDED_FP32_COMPONENTS},
        {"RB_COLOR_PIX_TILES", RB_COLOR_PIX_TILES},
        {"RB_STALL_CYCLES_CCU", RB_STALL_CYCLES_CCU},
        {"RB_EARLY_Z_ARB3_GRANT", RB_EARLY_Z_ARB3_GRANT},
        {"RB_LATE_Z_ARB3_GRANT", RB_LATE_Z_ARB3_GRANT},
        {"RB_EARLY_Z_SKIP_GRANT", RB_EARLY_Z_SKIP_GRANT},
};
const std::unordered_map<std::string, int> vsc_events_id_name_map{
        {"VSC_BUSY_CYCLES", VSC_BUSY_CYCLES},
        {"VSC_WORKING_CYCLES", VSC_WORKING_CYCLES},
        {"VSC_STALL_CYCLES_UCHE", VSC_STALL_CYCLES_UCHE},
        {"VSC_EOT_NUM", VSC_EOT_NUM},
        {"VSC_INPUT_TILES", VSC_INPUT_TILES},
};
const std::unordered_map<std::string, int> ccu_events_id_name_map{
        {"CCU_BUSY_CYCLES", CCU_BUSY_CYCLES},
        {"CCU_STALL_CYCLES_RB_DEPTH_RETURN", CCU_STALL_CYCLES_RB_DEPTH_RETURN},
        {"CCU_STALL_CYCLES_RB_COLOR_RETURN", CCU_STALL_CYCLES_RB_COLOR_RETURN},
        {"CCU_STARVE_CYCLES_FLAG_RETURN", CCU_STARVE_CYCLES_FLAG_RETURN},
        {"CCU_DEPTH_BLOCKS", CCU_DEPTH_BLOCKS},
        {"CCU_COLOR_BLOCKS", CCU_COLOR_BLOCKS},
        {"CCU_DEPTH_BLOCK_HIT", CCU_DEPTH_BLOCK_HIT},
        {"CCU_COLOR_BLOCK_HIT", CCU_COLOR_BLOCK_HIT},
        {"CCU_PARTIAL_BLOCK_READ", CCU_PARTIAL_BLOCK_READ},
        {"CCU_GMEM_READ", CCU_GMEM_READ},
        {"CCU_GMEM_WRITE", CCU_GMEM_WRITE},
        {"CCU_DEPTH_READ_FLAG0_COUNT", CCU_DEPTH_READ_FLAG0_COUNT},
        {"CCU_DEPTH_READ_FLAG1_COUNT", CCU_DEPTH_READ_FLAG1_COUNT},
        {"CCU_DEPTH_READ_FLAG2_COUNT", CCU_DEPTH_READ_FLAG2_COUNT},
        {"CCU_DEPTH_READ_FLAG3_COUNT", CCU_DEPTH_READ_FLAG3_COUNT},
        {"CCU_DEPTH_READ_FLAG4_COUNT", CCU_DEPTH_READ_FLAG4_COUNT},
        {"CCU_DEPTH_READ_FLAG5_COUNT", CCU_DEPTH_READ_FLAG5_COUNT},
        {"CCU_DEPTH_READ_FLAG6_COUNT", CCU_DEPTH_READ_FLAG6_COUNT},
        {"CCU_DEPTH_READ_FLAG8_COUNT", CCU_DEPTH_READ_FLAG8_COUNT},
        {"CCU_COLOR_READ_FLAG0_COUNT", CCU_COLOR_READ_FLAG0_COUNT},
        {"CCU_COLOR_READ_FLAG1_COUNT", CCU_COLOR_READ_FLAG1_COUNT},
        {"CCU_COLOR_READ_FLAG2_COUNT", CCU_COLOR_READ_FLAG2_COUNT},
        {"CCU_COLOR_READ_FLAG3_COUNT", CCU_COLOR_READ_FLAG3_COUNT},
        {"CCU_COLOR_READ_FLAG4_COUNT", CCU_COLOR_READ_FLAG4_COUNT},
        {"CCU_COLOR_READ_FLAG5_COUNT", CCU_COLOR_READ_FLAG5_COUNT},
        {"CCU_COLOR_READ_FLAG6_COUNT", CCU_COLOR_READ_FLAG6_COUNT},
        {"CCU_COLOR_READ_FLAG8_COUNT", CCU_COLOR_READ_FLAG8_COUNT},
        {"CCU_2D_RD_REQ", CCU_2D_RD_REQ},
        {"CCU_2D_WR_REQ", CCU_2D_WR_REQ},
};
const std::unordered_map<std::string, int> lrz_events_id_name_map{
        {"LRZ_BUSY_CYCLES", LRZ_BUSY_CYCLES},
        {"LRZ_STARVE_CYCLES_RAS", LRZ_STARVE_CYCLES_RAS},
        {"LRZ_STALL_CYCLES_RB", LRZ_STALL_CYCLES_RB},
        {"LRZ_STALL_CYCLES_VSC", LRZ_STALL_CYCLES_VSC},
        {"LRZ_STALL_CYCLES_VPC", LRZ_STALL_CYCLES_VPC},
        {"LRZ_STALL_CYCLES_FLAG_PREFETCH", LRZ_STALL_CYCLES_FLAG_PREFETCH},
        {"LRZ_STALL_CYCLES_UCHE", LRZ_STALL_CYCLES_UCHE},
        {"LRZ_LRZ_READ", LRZ_LRZ_READ},
        {"LRZ_LRZ_WRITE", LRZ_LRZ_WRITE},
        {"LRZ_READ_LATENCY", LRZ_READ_LATENCY},
        {"LRZ_MERGE_CACHE_UPDATING", LRZ_MERGE_CACHE_UPDATING},
        {"LRZ_PRIM_KILLED_BY_MASKGEN", LRZ_PRIM_KILLED_BY_MASKGEN},
        {"LRZ_PRIM_KILLED_BY_LRZ", LRZ_PRIM_KILLED_BY_LRZ},
        {"LRZ_VISIBLE_PRIM_AFTER_LRZ", LRZ_VISIBLE_PRIM_AFTER_LRZ},
        {"LRZ_FULL_8X8_TILES", LRZ_FULL_8X8_TILES},
        {"LRZ_PARTIAL_8X8_TILES", LRZ_PARTIAL_8X8_TILES},
        {"LRZ_TILE_KILLED", LRZ_TILE_KILLED},
        {"LRZ_TOTAL_PIXEL", LRZ_TOTAL_PIXEL},
        {"LRZ_VISIBLE_PIXEL_AFTER_LRZ", LRZ_VISIBLE_PIXEL_AFTER_LRZ},
        {"LRZ_FULLY_COVERED_TILES", LRZ_FULLY_COVERED_TILES},
        {"LRZ_PARTIAL_COVERED_TILES", LRZ_PARTIAL_COVERED_TILES},
        {"LRZ_FEEDBACK_ACCEPT", LRZ_FEEDBACK_ACCEPT},
        {"LRZ_FEEDBACK_DISCARD", LRZ_FEEDBACK_DISCARD},
        {"LRZ_FEEDBACK_STALL", LRZ_FEEDBACK_STALL},
        {"LRZ_STALL_CYCLES_RB_ZPLANE", LRZ_STALL_CYCLES_RB_ZPLANE},
        {"LRZ_STALL_CYCLES_RB_BPLANE", LRZ_STALL_CYCLES_RB_BPLANE},
        {"LRZ_STALL_CYCLES_VC", LRZ_STALL_CYCLES_VC},
        {"LRZ_RAS_MASK_TRANS", LRZ_RAS_MASK_TRANS},
};
const std::unordered_map<std::string, int> cmp_events_id_name_map{
        {"CMPDECMP_STALL_CYCLES_ARB", CMPDECMP_STALL_CYCLES_ARB},
        {"CMPDECMP_VBIF_LATENCY_CYCLES", CMPDECMP_VBIF_LATENCY_CYCLES},
        {"CMPDECMP_VBIF_LATENCY_SAMPLES", CMPDECMP_VBIF_LATENCY_SAMPLES},
        {"CMPDECMP_VBIF_READ_DATA_CCU", CMPDECMP_VBIF_READ_DATA_CCU},
        {"CMPDECMP_VBIF_WRITE_DATA_CCU", CMPDECMP_VBIF_WRITE_DATA_CCU},
        {"CMPDECMP_VBIF_READ_REQUEST", CMPDECMP_VBIF_READ_REQUEST},
        {"CMPDECMP_VBIF_WRITE_REQUEST", CMPDECMP_VBIF_WRITE_REQUEST},
        {"CMPDECMP_VBIF_READ_DATA", CMPDECMP_VBIF_READ_DATA},
        {"CMPDECMP_VBIF_WRITE_DATA", CMPDECMP_VBIF_WRITE_DATA},
        {"CMPDECMP_FLAG_FETCH_CYCLES", CMPDECMP_FLAG_FETCH_CYCLES},
        {"CMPDECMP_FLAG_FETCH_SAMPLES", CMPDECMP_FLAG_FETCH_SAMPLES},
        {"CMPDECMP_DEPTH_WRITE_FLAG1_COUNT", CMPDECMP_DEPTH_WRITE_FLAG1_COUNT},
        {"CMPDECMP_DEPTH_WRITE_FLAG2_COUNT", CMPDECMP_DEPTH_WRITE_FLAG2_COUNT},
        {"CMPDECMP_DEPTH_WRITE_FLAG3_COUNT", CMPDECMP_DEPTH_WRITE_FLAG3_COUNT},
        {"CMPDECMP_DEPTH_WRITE_FLAG4_COUNT", CMPDECMP_DEPTH_WRITE_FLAG4_COUNT},
        {"CMPDECMP_DEPTH_WRITE_FLAG5_COUNT", CMPDECMP_DEPTH_WRITE_FLAG5_COUNT},
        {"CMPDECMP_DEPTH_WRITE_FLAG6_COUNT", CMPDECMP_DEPTH_WRITE_FLAG6_COUNT},
        {"CMPDECMP_DEPTH_WRITE_FLAG8_COUNT", CMPDECMP_DEPTH_WRITE_FLAG8_COUNT},
        {"CMPDECMP_COLOR_WRITE_FLAG1_COUNT", CMPDECMP_COLOR_WRITE_FLAG1_COUNT},
        {"CMPDECMP_COLOR_WRITE_FLAG2_COUNT", CMPDECMP_COLOR_WRITE_FLAG2_COUNT},
        {"CMPDECMP_COLOR_WRITE_FLAG3_COUNT", CMPDECMP_COLOR_WRITE_FLAG3_COUNT},
        {"CMPDECMP_COLOR_WRITE_FLAG4_COUNT", CMPDECMP_COLOR_WRITE_FLAG4_COUNT},
        {"CMPDECMP_COLOR_WRITE_FLAG5_COUNT", CMPDECMP_COLOR_WRITE_FLAG5_COUNT},
        {"CMPDECMP_COLOR_WRITE_FLAG6_COUNT", CMPDECMP_COLOR_WRITE_FLAG6_COUNT},
        {"CMPDECMP_COLOR_WRITE_FLAG8_COUNT", CMPDECMP_COLOR_WRITE_FLAG8_COUNT},
        {"CMPDECMP_2D_STALL_CYCLES_VBIF_REQ",
         CMPDECMP_2D_STALL_CYCLES_VBIF_REQ},
        {"CMPDECMP_2D_STALL_CYCLES_VBIF_WR", CMPDECMP_2D_STALL_CYCLES_VBIF_WR},
        {"CMPDECMP_2D_STALL_CYCLES_VBIF_RETURN",
         CMPDECMP_2D_STALL_CYCLES_VBIF_RETURN},
        {"CMPDECMP_2D_RD_DATA", CMPDECMP_2D_RD_DATA},
        {"CMPDECMP_2D_WR_DATA", CMPDECMP_2D_WR_DATA},
        {"CMPDECMP_VBIF_READ_DATA_UCHE_CH0", CMPDECMP_VBIF_READ_DATA_UCHE_CH0},
        {"CMPDECMP_VBIF_READ_DATA_UCHE_CH1", CMPDECMP_VBIF_READ_DATA_UCHE_CH1},
        {"CMPDECMP_2D_OUTPUT_TRANS", CMPDECMP_2D_OUTPUT_TRANS},
        {"CMPDECMP_VBIF_WRITE_DATA_UCHE", CMPDECMP_VBIF_WRITE_DATA_UCHE},
        {"CMPDECMP_DEPTH_WRITE_FLAG0_COUNT", CMPDECMP_DEPTH_WRITE_FLAG0_COUNT},
        {"CMPDECMP_COLOR_WRITE_FLAG0_COUNT", CMPDECMP_COLOR_WRITE_FLAG0_COUNT},
        {"CMPDECMP_COLOR_WRITE_FLAGALPHA_COUNT",
         CMPDECMP_COLOR_WRITE_FLAGALPHA_COUNT},
        {"CMPDECMP_2D_BUSY_CYCLES", CMPDECMP_2D_BUSY_CYCLES},
        {"CMPDECMP_2D_REORDER_STARVE_CYCLES",
         CMPDECMP_2D_REORDER_STARVE_CYCLES},
        {"CMPDECMP_2D_PIXELS", CMPDECMP_2D_PIXELS},
};

#define EVENT_GROUP_MAP(offset, name) \
    [EVENT_GROUP_##offset] = {&name##_events_id_name_map}

struct adreno_event_meta {
    const std::unordered_map<std::string, int>* events;
};

static struct adreno_event_meta series6_total_events[EVENT_GROUP_MAX] = {
        EVENT_GROUP_MAP(CP, cp),     EVENT_GROUP_MAP(RBBM, rbbm),
        EVENT_GROUP_MAP(PC, pc),     EVENT_GROUP_MAP(VFD, vfd),
        EVENT_GROUP_MAP(HLSQ, hlsq), EVENT_GROUP_MAP(VPC, vpc),
        EVENT_GROUP_MAP(TSE, tse),   EVENT_GROUP_MAP(RAS, ras),
        EVENT_GROUP_MAP(UCHE, uche), EVENT_GROUP_MAP(TP, tp),
        EVENT_GROUP_MAP(SP, sp),     EVENT_GROUP_MAP(RB, rb),
        [EVENT_GROUP_PWR] = {},      [EVENT_GROUP_VBIF] = {},
        [EVENT_GROUP_VBIF_PWR] = {}, [EVENT_GROUP_MH] = {},
        [EVENT_GROUP_PA_SU] = {},    [EVENT_GROUP_SQ] = {},
        [EVENT_GROUP_SX] = {},       [EVENT_GROUP_TCF] = {},
        [EVENT_GROUP_TCM] = {},      [EVENT_GROUP_TCR] = {},
        [EVENT_GROUP_L2] = {},       EVENT_GROUP_MAP(VSC, vsc),
        EVENT_GROUP_MAP(CCU, ccu),   EVENT_GROUP_MAP(LRZ, lrz),
        EVENT_GROUP_MAP(CMP, cmp),

};
